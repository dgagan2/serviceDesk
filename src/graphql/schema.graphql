
type Query {
    hello: String!,
    departmetByName(departmentName: String!): Department,
    departmentById(idDepartment: ID!): Department,
    allDepartments: [Department],
}

type Department{
    idDepartment: Int!,
    departmentName: String!
}

type ServiceCategories{
    idCategory: ID!,
    categoryName: String!
}

type Services{
    idService: ID!,
    serviceName: String!,
    servicePoster: String!,
    serviceDescription: String,
    idCategory: Int,
    category: ServiceCategories
}

type TicketStatus{
    idStatus: ID!,
    statusName: String!
}

type Tickets{
    ticketNumber: ID!,
    request:String!,
    idUser: String!,
    idDepartment: Int!,
    idService: Int!,
    creationDate: String,
    ticketStatus: Int!,
    serviceDescription: String,
    idAgent: String,
    updateDate: String,
    comments: [Comments],
    user: Users,
    deparment: Department,
    service: Services,
    status: TicketStatus,
}

type UserRoles{
    idRole: ID!,
    roleName: String!
}

type UserStates{
    idState: ID!,
    stateName: String!
}

type Users{
    idUser: String!,
    email: String!,
    name: String!,
    idDepartment:Int,
    idRole: Int,
    idState: Int,
    password: String!,
    recoveryToken: String,
    role: UserRoles,
    deparment: Department,
    state: UserStates
}

type Comments{
    idComment: ID!,
    ticketNumber: Int!,
    idUser: String!,
    comment: String!,
    creationDate: String,
    user: Users,
    ticket: Tickets
}



type Mutation {
    addDepartment(dto:CreateDepartmentDto!): Department,
    updateDepartment(idDepartment: Int!, departmentName: String!): Department,
    deleteDepartment(idDepartment: Int!): Department,
    login(email: String!, password: String!):AuthResponse
}

input CreateDepartmentDto {
    departmentName: String!
}

type AuthResponse {
    token: String!,
    user: Users!
}

