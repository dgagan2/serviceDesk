
type Query {
    hello: String!,
    #Query to get department
    departmetByName(departmentName: String!): Department,
    departmentById(idDepartment: ID!): Department,
    allDepartments: [Department],
    #Query to get user roles
    roleById(idRole: ID!): UserRoles,
    roleByName(roleName: String!): UserRoles,
    allRoles:[UserRoles],
    #Query to get user state
    stateById(idState: ID!): UserStates,
    stateByName(stateName: String!): UserStates,
    allStates:[UserStates],
     #Query to get users
    userById(idUser: ID!): Users,
    userByName(name: NameType!): Users,
    allUsers:[Users],
    userByEmail(email: EmailAddress!): Users,
}

type Department{
    idDepartment: Int!,
    departmentName: String!
}

type ServiceCategories{
    idCategory: ID!,
    categoryName: String!
}

type Services{
    idService: ID!,
    serviceName: String!,
    servicePoster: URL!,
    serviceDescription: String,
    idCategory: Int,
    category: ServiceCategories
}

type TicketStatus{
    idStatus: ID!,
    statusName: String!
}

type Tickets{
    ticketNumber: ID!,
    request:String!,
    idUser: String!,
    idDepartment: Int!,
    idService: Int!,
    creationDate: DateTime,
    ticketStatus: Int!,
    serviceDescription: String,
    idAgent: String,
    updateDate: String,
    comments: [Comments],
    user: Users,
    deparment: Department,
    service: Services,
    status: TicketStatus,
}

type UserRoles{
    idRole: ID!,
    roleName: String!,
    idUser:[Users] 
}

type UserStates{
    idState: ID!,
    stateName: String!,
    idUser:[Users] 
}

type Users{
    idUser: String!,
    email: String!,
    name: NameType!,
    idDepartment:Int,
    idRole: Int,
    idState: Int,
    password: PasswordType!,
    recoveryToken: String,
    role: UserRoles,
    deparment: Department,
    state: UserStates
}

type Comments{
    idComment: ID!,
    ticketNumber: Int!,
    idUser: String!,
    comment: String!,
    creationDate: DateTime,
    user: Users,
    ticket: Tickets
}



type Mutation {
    #Mutation to add, update or delete a department
    addDepartment(dto:CreateDepartmentDto!): Department,
    updateDepartment(idDepartment: Int!, departmentName: String!): Department,
    deleteDepartment(idDepartment: Int!): Department,
    #Mutation to do login
    login(email: EmailAddress!, password: String!):AuthResponse,
    #Mutation to add, update or delete an user role
    addRole(roleName:String!): UserRoles,
    updateRole(idRole: Int!, roleName: String!): UserRoles,
    deleteRole(idRole: Int!): UserRoles,
    #Mutation to add, update or delete an user state
    addState(stateName:String!): UserStates,
    updateState(idState: Int!, stateName: String!): UserStates,
    deleteState(idState: Int!): UserStates,
    #Mutation to update or delete an user
    updateUser(dto:UpdateUserDto!): Users,
    deleteUser(idUser: Int!): Users
}

input CreateDepartmentDto {
    departmentName: String!
}

input UpdateUserDto {
    idUser: String!,
    email: String,
    name: NameType,
    idDepartment:Int,
    idRole: Int,
    idState: Int,
}

type AuthResponse {
    token: String!,
    user: Users!
}

scalar PasswordType,
scalar NameType,

