# FILEPATH: /D:/Servicedesk/serviceDesk/src/graphql/schema.graphql

"""
Root query type for the GraphQL schema.
"""
type Query {
    """
    Query to get a department by its name.
    """
    departmetByName(departmentName: String!): Department,

    """
    Query to get a department by its ID.
    """
    departmentById(idDepartment: ID!): Department,

    """
    Query to get all departments.
    """
    allDepartments: [Department],

    """
    Query to get a user role by its ID.
    """
    roleById(idRole: ID!): UserRoles,

    """
    Query to get a user role by its name.
    """
    roleByName(roleName: String!): UserRoles,

    """
    Query to get all user roles.
    """
    allRoles: [UserRoles],

    """
    Query to get a user state by its ID.
    """
    stateById(idState: ID!): UserStates,

    """
    Query to get a user state by its name.
    """
    stateByName(stateName: String!): UserStates,

    """
    Query to get all user states.
    """
    allStates: [UserStates],

    """
    Query to get a user by its ID.
    """
    userById(idUser: ID!): Users,

    """
    Query to get a user by its name.
    """
    userByName(name: NameType!): Users,

    """
    Query to get all users.
    """
    allUsers: [Users],

    """
    Query to get a user by its email.
    """
    userByEmail(email: EmailAddress!): Users,

    """
    Query to get a category by its ID.
    """
    categoryById(idCategory: ID!): ServiceCategories,

    """
    Query to get a category by its name.
    """
    categoryByName(categoryName: String!): ServiceCategories,

    """
    Query to get all categories.
    """
    allCategories: [ServiceCategories!],

    """
    Query to get a service by its ID.
    """
    serviceById(idService: ID!): Services,

    """
    Query to get a service by its name.
    """
    serviceByName(serviceName: String!): Services,

    """
    Query to get all services.
    """
    allServices: [Services!],

    """
    Query to get a ticket status by its ID.
    """
    statusById(idStatus: ID!): TicketStatus,

    """
    Query to get a ticket status by its name.
    """
    statusByName(statusName: String!): TicketStatus,

    """
    Query to get all ticket statuses.
    """
    allStatus: [TicketStatus!],
     """
    Query to get a ticket by ticketNumber.
    """ 
    ticketByID(ticketNumber: Int!): Tickets,
    ticketByAgent(idAgent:String):[Tickets],
    ticketByStatus(idStatus:Int!): Tickets,
    ticketByUser: [Tickets],
    allTickets(pageNumber:Int, pageSize:Int): allTickets,
    ticketByStatusAndUser( idUser:Int! idStatus:Int!): [Tickets],
    commentsByTicket(ticketNumber:Int!): [Comments]
}

# Represents a department in the system.
type Department {
    # The unique identifier of the department.
    idDepartment: Int!

    # The name of the department.
    departmentName: String!

    # The users associated with the department.
    users: [Users]
}


# Represents the schema for service categories.
type ServiceCategories {
    # The unique identifier for the category.
    idCategory: ID!

    # The name of the category.
    categoryName: String!
}


# Represents a service offered by the service desk.
type Services {
    # The unique identifier of the service.
    idService: ID!

    # The name of the service.
    serviceName: String!

    # The URL of the service's poster image.
    servicePoster: URL!

    # The description of the service.
    serviceDescription: String

    # The identifier of the category to which the service belongs.
    idCategory: Int

    # The category to which the service belongs.
    serviceCategories: ServiceCategories
}



# Represents the status of a ticket.

type TicketStatus {
    #The unique identifier of the status.
    idStatus: ID!

    #The name of the status.
    statusName: String!
}

type Tickets{
    ticketNumber: ID!,
    request:String!,
    idUser: String!,
    idDepartment: Int!,
    idService: Int!,
    creationDate: DateTime,
    ticketStatus: Int!,
    serviceDescription: String,
    idAgent: String,
    updateDate: DateTime,
    comments: [Comments],
    users_tickets_idUserTousers: Users,
    users_tickets_idAgentTousers: Users,
    department: Department,
    services: Services,
    ticketStatusToTickets: TicketStatus,
}


#Represents the roles assigned to a user.
type UserRoles {
    #The ID of the role.
    idRole: ID!

    #The name of the role.
    roleName: String!

    #The users assigned to this role.
    users: [Users]
}

#Represents the roles assigned to a user.
type UserRoles {
    #The ID of the role.
    idRole: ID!

    #The name of the role.
    roleName: String!

    #The users assigned to this role.
    users: [Users]
}

type UserRoles{
    idRole: ID!,
    roleName: String!,
    users:[Users] 
}

type UserStates{
    idState: ID!,
    stateName: String!,
    users:[Users] 
}

#Represents a user in the system.
type Users {
    #The unique identifier of the user.
    idUser: String!
    #The email address of the user.
    email: String!
    #The name of the user.
    name: String!
    #The ID of the department the user belongs to.
    idDepartment: Int
    #The ID of the role assigned to the user.
    idRole: Int
    #The ID of the state of the user.
    idState: Int
    #The password of the user.
    password: PasswordType!
    #The recovery token for the user.
    recoveryToken: String
    #The roles assigned to the user.
    userRoles: UserRoles
    #The department the user belongs to.
    department: Department
    #The states associated with the user.
    userStates: UserStates
}

type Comments{
    idComment: ID!,
    ticketNumber: Int!,
    idUser: String!,
    comment: String!,
    name: String!,
    updateDate: DateTime,
    creationDate: DateTime,
    users: Users,
    tickets: Tickets
}



type Mutation {
    #Mutation to add, update or delete a department
    addDepartment(dto:CreateDepartmentDto!): Department,
    updateDepartment(idDepartment: Int!, departmentName: String!): Department,
    deleteDepartment(idDepartment: Int!): Department,
    #Mutation to do login
    login(email: EmailAddress!, password: String!):AuthResponse,
    #Mutation to add, update or delete an user role
    addRole(roleName:String!): UserRoles,
    updateRole(idRole: Int!, roleName: String!): UserRoles,
    deleteRole(idRole: Int!): UserRoles,
    #Mutation to add, update or delete an user state
    addState(stateName:String!): UserStates,
    updateState(idState: Int!, stateName: String!): UserStates,
    deleteState(idState: Int!): UserStates,
    #Mutation to update or delete an user
    updateUser(dto:UpdateUserDto!): Users,
    deleteUser(idUser: Int!): Users,
    #Mutation to add, update or delete a category
    addCategory(categoryName:String!): ServiceCategories,
    updateCategory(idCategory: Int!, categoryName: String!): ServiceCategories,
    deleteCategory(idCategory: Int!): ServiceCategories,
     #Mutation to add, update or delete a services
    addService(dto:AddServiceDto!): Services,
    updateService(dto:UpdateServiceDto!): Services,
    deleteService(idService: Int!): Services,
    #Mutation to add, update or delete a ticket status
    addStatus(statusName:String!): TicketStatus,
    updateStatus(idStatus: Int!, statusName: String!): TicketStatus,
    deleteStatus(idStatus: Int!): TicketStatus,
    #Mutation to add, update or a ticket
    newTicket(dto:NewTicketDto!): Tickets,
    #deleteTicket(ticketNumber: Int!): Tickets,
    closetTicket(ticketNumber:Int!): Tickets,
    newAdminTicket(dto:NewTicketDto!): Tickets,
    updateTicket(dto:UpdateTicketDto!): Tickets
    #Mutation to add, update or a delete a comment
    addComment(ticketNumber: Int!, idUser: String!, comment: String!, name:String!): Comments,
    editComment(idComment: Int!, comment: String!, ticketNumber: Int!): Comments,
    deleteComment(idComment: Int!, ticketNumber: Int!): Comments,
}

input UpdateTicketDto{
    ticketNumber: Int!,
    idAgent: String,
    idStatus: Int
}

#Input object type for creating a department.
input CreateDepartmentDto {
    """
    The name of the department.
    """
    departmentName: String!
}

#Input type for updating a user.
input UpdateUserDto {
    #The ID of the user.
    idUser: String!,

    #The email of the user.
    email: String,

    #The name of the user.
    name: NameType,

    #The ID of the department the user belongs to.
    idDepartment: Int,

    #The ID of the role assigned to the user.
    idRole: Int,

    #The ID of the state of the user.
    idState: Int,
}
input AddServiceDto{
    serviceName: String!,
    servicePoster: URL!,
    serviceDescription: String!,
    idCategory: Int!
}

input UpdateServiceDto{
    idService: Int!,
    serviceName: String,
    servicePoster: URL,
    serviceDescription: String,
    idCategory: Int
}

input NewTicketDto{
    request:String!,
    idDepartment: Int!,
    idService: Int!,
    serviceDescription: String
    idUser: String
}
#Represents the response object for authentication.
type AuthResponse {
    #The authentication token.
    token: String!,

    #The user object.
    user: Users!
}

type allTickets{
    tickets: [Tickets],
    count: Int
}

scalar PasswordType,
scalar NameType,

