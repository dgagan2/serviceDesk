generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  idComment    Int       @id @default(autoincrement()) @db.SmallInt
  ticketNumber Int       @db.SmallInt
  idUser       String    @db.VarChar(50)
  creationDate DateTime? @db.Timestamp(6)
  comment      String
  users        users     @relation(fields: [idUser], references: [idUser], onDelete: NoAction)
  tickets      tickets   @relation(fields: [ticketNumber], references: [ticketNumber], onDelete: NoAction, onUpdate: NoAction)
}

model department {
  idDepartment   Int       @id @default(autoincrement()) @db.SmallInt
  departmentName String    @unique(map: "departmentName") @db.VarChar(20)
  services       services[]
  tickets        tickets[]
  users          users[]
}

model serviceCategories {
  idCategory   Int        @id @default(autoincrement()) @db.SmallInt
  categoryName String     @unique(map: "categoryName") @db.VarChar(30)
  services     services[]
}

model services {
  idService          Int                @id @default(autoincrement()) @db.SmallInt
  serviceName        String             @db.VarChar(30)
  servicePoster      String             @db.VarChar(255)
  serviceDescription String?            @db.VarChar(255)
  idCategory         Int?               @db.SmallInt
  serviceCategories  serviceCategories? @relation(fields: [idCategory], references: [idCategory], onDelete: NoAction, onUpdate: NoAction)
  idDepartment       Int?               @db.SmallInt
  department         department?        @relation(fields: [idDepartment], references: [idDepartment], onDelete: NoAction, onUpdate: NoAction)
  tickets            tickets[]
}

model ticketStatus {
  idStatus                                   Int       @id @default(autoincrement()) @db.SmallInt
  statusName                                 String    @unique(map: "statusName") @db.VarChar(15)
  ticketStatusToTicketss                     tickets[] @relation("ticketStatusToTickets")
}

model tickets {
  ticketNumber                                    Int          @id @default(autoincrement())
  request                                         String
  idUser                                          String       @db.VarChar(50)
  idDepartment                                    Int          @default(autoincrement()) @db.SmallInt
  idService                                       Int          @db.SmallInt
  creationDate                                    DateTime?    @db.Timestamp(6)
  ticketStatus                                    Int          @map(" ticketStatus") @db.SmallInt
  serviceDescription                              String?      @db.VarChar(255)
  idAgent                                         String?      @db.VarChar(50)
  updateDate                                      DateTime?    @db.Timestamp(6)
  comments                                        comments[]
  ticketStatusToTickets                           ticketStatus @relation("ticketStatusToTickets", fields: [ticketStatus], references: [idStatus], onDelete: NoAction, onUpdate: NoAction)
  users_tickets_idAgentTousers                    users?       @relation("tickets_idAgentTousers", fields: [idAgent], references: [idUser], onDelete: NoAction)
  department                                      department   @relation(fields: [idDepartment], references: [idDepartment], onDelete: NoAction, onUpdate: NoAction)
  services                                        services     @relation(fields: [idService], references: [idService], onDelete: SetNull)
  users_tickets_idUserTousers                     users        @relation("tickets_idUserTousers", fields: [idUser], references: [idUser], onDelete: NoAction)
}

model userRoles {
  idRole   Int     @id @default(autoincrement()) @db.SmallInt
  roleName String  @unique(map: "roleName") @db.VarChar(15)
  users    users[]
}

model userStates {
  idState   Int     @id @default(autoincrement())
  stateName String  @unique(map: "stateName") @db.VarChar(15)
  users     users[]
}



model users {
  idUser                         String      @id @db.VarChar(100)
  email                          String      @unique(map: "email") @db.VarChar(40)
  name                           String      @db.VarChar(60)
  idDepartment                   Int?        @db.SmallInt
  idRole                         Int?        @db.SmallInt
  idState                        Int?        @db.SmallInt
  password                       String      @db.VarChar(100)
  recoveryToken                  String?     @db.VarChar(200)
  comments                       comments[]
  tickets_tickets_idAgentTousers tickets[]   @relation("tickets_idAgentTousers")
  tickets_tickets_idUserTousers  tickets[]   @relation("tickets_idUserTousers")
  department                     department? @relation(fields: [idDepartment], references: [idDepartment], onDelete: NoAction, onUpdate: NoAction)
  userRoles                      userRoles?  @relation(fields: [idRole], references: [idRole], onDelete: Restrict)
  userStates                     userStates? @relation(fields: [idState], references: [idState], onDelete: NoAction)
}
