generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model department {
  id             Int      @id @default(autoincrement())
  nameDepartment String   @unique(map: "nameDepartment") @db.VarChar
  person         person[]
  ticket         ticket[]

  @@map(" department")
}

model categoryService {
  idCategory   Int          @id @default(autoincrement())
  nameCategory String       @unique @db.VarChar(70)
  itemService  itemService?
}

model comment {
  id           Int      @id @default(autoincrement())
  numberTicket Int?
  IdUser       String?  @db.VarChar(70)
  creationDate DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date
  person       person?  @relation(fields: [IdUser], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket       ticket?  @relation(fields: [numberTicket], references: [numberTicket], onDelete: Cascade)
}

model itemService {
  id              Int             @id @default(autoincrement())
  nameItem        String?         @unique @db.VarChar
  idCategory      Int?
  categoryService categoryService @relation(fields: [id], references: [idCategory], onDelete: NoAction, onUpdate: NoAction)
  ticket          ticket[]
}

model person {
  id                            String      @id @db.VarChar
  name                          String
  email                         String      @unique(map: "email")
  idDepartment                  Int?
  idRole                        Int?
  idState                       Int?
  password                      String
  comment                       comment[]
  department                    department? @relation(fields: [idDepartment], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roleUser                      roleUser?   @relation(fields: [idRole], references: [idRole], onDelete: NoAction, onUpdate: NoAction)
  stateUser                     stateUser?  @relation(fields: [idState], references: [idState], onDelete: NoAction, onUpdate: NoAction)
  ticket_ticket_idAgentToperson ticket[]    @relation("ticket_idAgentToperson")
  ticket_ticket_idUserToperson  ticket[]    @relation("ticket_idUserToperson")
}

model roleUser {
  idRole   Int      @id @default(autoincrement())
  nameRole String   @unique @db.VarChar
  person   person[]
}

model stateTicket {
  id        Int      @id @default(autoincrement())
  nameState String   @unique @db.VarChar
  ticket    ticket[]
}

model stateUser {
  idState   Int      @id @default(autoincrement())
  nameState String   @unique @db.VarChar
  person    person[]
}

model ticket {
  numberTicket                  Int          @id @default(autoincrement())
  description                   String
  idUser                        String?      @db.VarChar
  idDepartment                  Int?
  idItem                        Int?
  creationDate                  DateTime     @default(dbgenerated("CURRENT_DATE")) @db.Date
  idStateTicket                 Int?
  idComment                     Int?
  idAgent                       String?      @db.VarChar
  comment                       comment[]
  person_ticket_idAgentToperson person?      @relation("ticket_idAgentToperson", fields: [idAgent], references: [id], onDelete: NoAction, onUpdate: NoAction)
  department                    department?  @relation(fields: [idDepartment], references: [id], onDelete: NoAction, onUpdate: NoAction)
  itemService                   itemService? @relation(fields: [idItem], references: [id], onDelete: NoAction, onUpdate: NoAction)
  stateTicket                   stateTicket? @relation(fields: [idStateTicket], references: [id], onDelete: NoAction, onUpdate: NoAction)
  person_ticket_idUserToperson  person?      @relation("ticket_idUserToperson", fields: [idUser], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
